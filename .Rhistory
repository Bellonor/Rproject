isemp<-isEmptyStr(tmpstr);
if(isemp)next
index<-which(c1[,1]==tmpstr);
if(length(index)==0){
t1<-cbind(tmpstr,'1');
c1<-rbind(c1,t1);
}else{
tmp2<-as.numeric(c1[index,2])+1;
c1[index,2]<-tmp2;
}
}
}
l1<-c1[order(c1[,1]),]
c1rows<-length(c1[,1]);
for(i in 1:c1rows){
tmp3<-as.numeric(c1[i,2]);
if(tmp3<3){
index<-which(l1[,1]==c1[i,1])
l1<-l1[-index,];
}
}
View(`l1`)
#我的函数,字符串为否为空
library(stringr)
isEmptyStr<-function(str){
str<-str_trim(str)
if(str==""){
return (TRUE);
}
if(length(str)==0){
return (TRUE);
}
if(is.na(str)){
return (TRUE);
}else{
return (FALSE);
}
}
a<-isEmptyStr("")
#1. 在算法的第一次迭代，每个项都是候选1-项集的集合C1 的成员。算法简单地扫描所有的事务，
#   对每个项的出现次数计数。
support<-2;#支持度设为2
data<-read.csv("Apriori/data.csv",sep = ",",row.names=1, fill = TRUE,header=FALSE,col.names = paste0("V", 1:5));
rows<-length(data[,1]);
cols<-length(data[1,]);
c1<-matrix(0,nrow=0,ncol=2);
for(i in 1:rows){
for(j in 1:cols){
tmp<-data[i,j];
tmpstr<-as.character(tmp[[1]]);
isemp<-isEmptyStr(tmpstr);
if(isemp)next
index<-which(c1[,1]==tmpstr);
if(length(index)==0){
t1<-cbind(tmpstr,'1');
c1<-rbind(c1,t1);
}else{
tmp2<-as.numeric(c1[index,2])+1;
c1[index,2]<-tmp2;
}
}
}
l1<-c1[order(c1[,1]),]
c1rows<-length(c1[,1]);
for(i in 1:c1rows){
tmp3<-as.numeric(c1[i,2]);
if(tmp3<1){
index<-which(l1[,1]==c1[i,1])
l1<-l1[-index,];
}
}
View(data)
View(`c1`)
debugSource('E:/Git/Rproject/Rproject/Apriori/apriori_0.r', encoding='UTF-8', echo=TRUE)
debugSource('E:/Git/Rproject/Rproject/Apriori/apriori_0.r', encoding='UTF-8', echo=TRUE)
View(`l1`)
View(`l1`)
View(`l1`)
#我的函数,字符串为否为空
library(stringr)
isEmptyStr<-function(str){
str<-str_trim(str)
if(str==""){
return (TRUE);
}
if(length(str)==0){
return (TRUE);
}
if(is.na(str)){
return (TRUE);
}else{
return (FALSE);
}
}
a<-isEmptyStr("")
#1. 在算法的第一次迭代，每个项都是候选1-项集的集合C1 的成员。算法简单地扫描所有的事务，
#   对每个项的出现次数计数。
support<-2;#支持度设为2
data<-read.csv("Apriori/data.csv",sep = ",",row.names=1, fill = TRUE,header=FALSE,col.names = paste0("V", 1:5));
rows<-length(data[,1]);
cols<-length(data[1,]);
c1<-matrix(0,nrow=0,ncol=2);
for(i in 1:rows){
for(j in 1:cols){
tmp<-data[i,j];
tmpstr<-as.character(tmp[[1]]);
isemp<-isEmptyStr(tmpstr);
if(isemp)next
index<-which(c1[,1]==tmpstr);
if(length(index)==0){
t1<-cbind(tmpstr,'1');
c1<-rbind(c1,t1);
}else{
tmp2<-as.numeric(c1[index,2])+1;
c1[index,2]<-tmp2;
}
}
}
l1<-c1[order(c1[,1]),]
c1rows<-length(c1[,1]);
for(i in 1:c1rows){
browser()
tmp3<-as.numeric(c1[i,2]);
if(tmp3<3){
index<-which(l1[,1]==c1[i,1])
l1<-l1[-index,];
}
}
View(`l1`)
#我的函数,字符串为否为空
library(stringr)
isEmptyStr<-function(str){
str<-str_trim(str)
if(str==""){
return (TRUE);
}
if(length(str)==0){
return (TRUE);
}
if(is.na(str)){
return (TRUE);
}else{
return (FALSE);
}
}
a<-isEmptyStr("")
#1. 在算法的第一次迭代，每个项都是候选1-项集的集合C1 的成员。算法简单地扫描所有的事务，
#   对每个项的出现次数计数。
support<-2;#支持度设为2
data<-read.csv("Apriori/data.csv",sep = ",",row.names=1, fill = TRUE,header=FALSE,col.names = paste0("V", 1:5));
rows<-length(data[,1]);
cols<-length(data[1,]);
c1<-matrix(0,nrow=0,ncol=2);
for(i in 1:rows){
for(j in 1:cols){
tmp<-data[i,j];
tmpstr<-as.character(tmp[[1]]);
isemp<-isEmptyStr(tmpstr);
if(isemp)next
index<-which(c1[,1]==tmpstr);
if(length(index)==0){
t1<-cbind(tmpstr,'1');
c1<-rbind(c1,t1);
}else{
tmp2<-as.numeric(c1[index,2])+1;
c1[index,2]<-tmp2;
}
}
}
l1<-c1[order(c1[,1]),]
c1rows<-length(c1[,1]);
for(i in 1:c1rows){
tmp3<-as.numeric(c1[i,2]);
if(tmp3<3){
index<-which(l1[,1]==c1[i,1])
l1<-l1[-index,];
}
}
debugSource('E:/Git/Rproject/Rproject/Apriori/apriori_0.r', encoding='UTF-8', echo=TRUE)
c1rows<-length(c1[,1]);
for(i in 1:c1rows){
tmp3<-as.numeric(c1[i,2]);
if(tmp3<3){
index<-which(l1[,1]==c1[i,1])
l1<-l1[-index,];
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
tmp2<-as.numeric(c1[index,2])+1;
#我的函数,字符串为否为空
library(stringr)
isEmptyStr<-function(str){
str<-str_trim(str)
if(str==""){
return (TRUE);
}
if(length(str)==0){
return (TRUE);
}
if(is.na(str)){
return (TRUE);
}else{
return (FALSE);
}
}
a<-isEmptyStr("")
#1. 在算法的第一次迭代，每个项都是候选1-项集的集合C1 的成员。算法简单地扫描所有的事务，
#   对每个项的出现次数计数。
support<-2;#支持度设为2
data<-read.csv("Apriori/data.csv",sep = ",",row.names=1, fill = TRUE,header=FALSE,col.names = paste0("V", 1:5));
rows<-length(data[,1]);
cols<-length(data[1,]);
c1<-matrix(0,nrow=0,ncol=2);
for(i in 1:rows){
for(j in 1:cols){
tmp<-data[i,j];
tmpstr<-as.character(tmp[[1]]);
isemp<-isEmptyStr(tmpstr);
if(isemp)next
index<-which(c1[,1]==tmpstr);
if(length(index)==0){
t1<-cbind(tmpstr,'1');
c1<-rbind(c1,t1);
}else{
tmp2<-as.numeric(c1[index,2])+1;
c1[index,2]<-tmp2;
}
}
}
l1<-c1[order(c1[,1]),]
c1rows<-length(c1[,1]);
for(i in 1:c1rows){
tmp3<-as.numeric(c1[i,2]);
if(tmp3<3){
index<-which(l1[,1]==c1[i,1])
l1<-l1[-index,];
}
}
View(`l1`)
#我的函数,字符串为否为空
library(stringr)
isEmptyStr<-function(str){
str<-str_trim(str)
if(str==""){
return (TRUE);
}
if(length(str)==0){
return (TRUE);
}
if(is.na(str)){
return (TRUE);
}else{
return (FALSE);
}
}
a<-isEmptyStr("")
#1. 在算法的第一次迭代，每个项都是候选1-项集的集合C1 的成员。算法简单地扫描所有的事务，
#   对每个项的出现次数计数。
support<-2;#支持度设为2
data<-read.csv("Apriori/data.csv",sep = ",",row.names=1, fill = TRUE,header=FALSE,col.names = paste0("V", 1:5));
rows<-length(data[,1]);
cols<-length(data[1,]);
c1<-matrix(0,nrow=0,ncol=2);
for(i in 1:rows){
for(j in 1:cols){
tmp<-data[i,j];
tmpstr<-as.character(tmp[[1]]);
isemp<-isEmptyStr(tmpstr);
if(isemp)next
index<-which(c1[,1]==tmpstr);
if(length(index)==0){
t1<-cbind(tmpstr,'1');
c1<-rbind(c1,t1);
}else{
tmp2<-as.numeric(c1[index,2])+1;
c1[index,2]<-tmp2;
}
}
}
l1<-c1[order(c1[,1]),]
c1rows<-length(c1[,1]);
for(i in 1:c1rows){
tmp3<-as.numeric(c1[i,2]);
if(tmp3<support){
index<-which(l1[,1]==c1[i,1])
l1<-l1[-index,];
}
}
View(`l1`)
#我的函数,字符串为否为空
library(stringr)
isEmptyStr<-function(str){
str<-str_trim(str)
if(str==""){
return (TRUE);
}
if(length(str)==0){
return (TRUE);
}
if(is.na(str)){
return (TRUE);
}else{
return (FALSE);
}
}
a<-isEmptyStr("")
#1. 在算法的第一次迭代，每个项都是候选1-项集的集合C1 的成员。算法简单地扫描所有的事务，
#   对每个项的出现次数计数。
support<-3;#支持度设为2
data<-read.csv("Apriori/data.csv",sep = ",",row.names=1, fill = TRUE,header=FALSE,col.names = paste0("V", 1:5));
rows<-length(data[,1]);
cols<-length(data[1,]);
c1<-matrix(0,nrow=0,ncol=2);
for(i in 1:rows){
for(j in 1:cols){
tmp<-data[i,j];
tmpstr<-as.character(tmp[[1]]);
isemp<-isEmptyStr(tmpstr);
if(isemp)next
index<-which(c1[,1]==tmpstr);
if(length(index)==0){
t1<-cbind(tmpstr,'1');
c1<-rbind(c1,t1);
}else{
tmp2<-as.numeric(c1[index,2])+1;
c1[index,2]<-tmp2;
}
}
}
l1<-c1[order(c1[,1]),]
c1rows<-length(c1[,1]);
for(i in 1:c1rows){
tmp3<-as.numeric(c1[i,2]);
if(tmp3<support){
index<-which(l1[,1]==c1[i,1])
l1<-l1[-index,];
}
}
View(`l1`)
l1
#我的函数,字符串为否为空
library(stringr)
isEmptyStr<-function(str){
str<-str_trim(str)
if(str==""){
return (TRUE);
}
if(length(str)==0){
return (TRUE);
}
if(is.na(str)){
return (TRUE);
}else{
return (FALSE);
}
}
a<-isEmptyStr("")
#1. 在算法的第一次迭代，每个项都是候选1-项集的集合C1 的成员。算法简单地扫描所有的事务，
#   对每个项的出现次数计数。
support<-2;#支持度设为2
data<-read.csv("Apriori/data.csv",sep = ",",row.names=1, fill = TRUE,header=FALSE,col.names = paste0("V", 1:5));
rows<-length(data[,1]);
cols<-length(data[1,]);
c1<-matrix(0,nrow=0,ncol=2);
for(i in 1:rows){
for(j in 1:cols){
tmp<-data[i,j];
tmpstr<-as.character(tmp[[1]]);
isemp<-isEmptyStr(tmpstr);
if(isemp)next
index<-which(c1[,1]==tmpstr);
if(length(index)==0){
t1<-cbind(tmpstr,'1');
c1<-rbind(c1,t1);
}else{
tmp2<-as.numeric(c1[index,2])+1;
c1[index,2]<-tmp2;
}
}
}
l1<-c1[order(c1[,1]),]
c1rows<-length(c1[,1]);
for(i in 1:c1rows){
tmp3<-as.numeric(c1[i,2]);
if(tmp3<support){
index<-which(l1[,1]==c1[i,1])
l1<-l1[-index,];
}
}
View(`l1`)
choose(l1[,1],2)
choose(l1[,2],2)
l1
choose(1:6,2)
choose(3,2)
l1
combn(l1[,1],2)
c2<-t(combn(l1[,1],2))
c2
install.packages("arules")
help(apriori)
View(data)
#pages<-read.csv("page",header=FALSE);
pages<-read.csv("people.csv",header=FALSE);
#构造邻接矩阵(方阵):
mrow<-max(pages)
A<-matrix(0,nrow=mrow,ncol=mrow);
#cols=length(pages[1,]);
rows=length(pages[,1]);
for(i in 1:rows){
p1<-pages[i,1];
p2<-pages[i,2];
A[p2,p1]<-1;
}
#考虑阻尼系统的情况
csum<-colSums(A);
csum[csum==0] <- 1;
Arow=nrow(A);
d<-0.85;
de<-1-d/Arow;
delta <- (1-d)/Arow;
B <- matrix(delta,nrow(A),ncol(A));
for (i in 1:Arow) B[i,] <- B[i,] + d*A[i,]/csum;
# 迭代求解特征向量值
x <- rep(1,Arow);
for (i in 1:100) x <- B %*% x
x/sum(x)
View(x)
install.packages("rJava")
install.packages("RHive")
install.packages("RHive")
h=c(171,175,159,155,152,158,154,164,168,166,159,164)
w=c(57,64,41,38,35,44,41,51,57,49,47,46)
plot(h,w)
z=lm(y~x+1)
summary(z)
y=c(61,57,58,40,90,35,68)
y
x=c(170,168,175,153,185,135,172)
x
plot(x,y)
z=lm(y~x+1)
summary(z)
h=c(171,175,159,155,152,158,154,164,168,166,159,164)
w=c(57,64,41,38,35,44,41,51,57,49,47,46)
plot(w~h+1)
x=c(171,175,159,155,152,158,154,164,168,166,159,164)
y=c(57,64,41,38,35,44,41,51,57,49,47,46)
a=lm(y~x)
x=c(171,175,159,155,152,158,154,164,168,166,159,164)
y=c(57,64,41,38,35,44,41,51,57,49,47,46)
a=lm(y~x)
summary(a)
z=data.frame(x=185)
predict(a,z)
z=data.frame(x=175)
predict(a,z)
toothpaste<-data.frame(
X1=c(-0.05, 0.25,0.60,0,   0.25,0.20, 0.15,0.05,-0.15, 0.15,
0.20, 0.10,0.40,0.45,0.35,0.30, 0.50,0.50, 0.40,-0.05,
-0.05,-0.10,0.20,0.10,0.50,0.60,-0.05,0,    0.05, 0.55),
X2=c( 5.50,6.75,7.25,5.50,7.00,6.50,6.75,5.25,5.25,6.00,
6.50,6.25,7.00,6.90,6.80,6.80,7.10,7.00,6.80,6.50,
6.25,6.00,6.50,7.00,6.80,6.80,6.50,5.75,5.80,6.80),
Y =c( 7.38,8.51,9.52,7.50,9.33,8.28,8.75,7.87,7.10,8.00,
7.89,8.15,9.10,8.86,8.90,8.87,9.26,9.00,8.75,7.95,
7.65,7.27,8.00,8.50,8.75,9.21,8.27,7.67,7.93,9.26)
)
lm.sol<-lm(Y~X1+X2,data=toothpaste)
summary(lm.sol)
attach(toothpaste)
plot(Y~X1);
abline(lm(Y~X1))
lm2.sol<-lm(Y~X2+I(X2^2))
